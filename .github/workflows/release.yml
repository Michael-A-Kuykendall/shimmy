name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - test-release  # Test on specific branch
  workflow_dispatch:  # Allow manual testing

jobs:
  # 🚧 MANDATORY RELEASE GATES - ALL MUST PASS OR ENTIRE RELEASE STOPS
  preflight:
    name: "🚧 Release Gates - MANDATORY VALIDATION"
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.gates.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: "🚧 GATE 1/6: Core Build Validation"
        run: |
          echo "::group::Gate 1: Core Build"
          cargo build --release --no-default-features --features huggingface
          echo "✅ Core build successful"
          echo "::endgroup::"

      - name: "🚧 GATE 2/6: CUDA Build Validation (No Timeout - Can Take Hours)"
        run: |
          echo "::group::Gate 2: CUDA Build"
          echo "⏳ CUDA compilation can take 19+ hours - letting it run to natural completion"
          
          # Check if CUDA Toolkit is available first
          if command -v nvcc >/dev/null 2>&1; then
            echo "✅ CUDA Toolkit found, attempting CUDA build..."
            cargo build --release --no-default-features --features llama-cuda
            echo "✅ CUDA build completed successfully"
          else
            echo "⚠️ CUDA Toolkit not found on runner (nvcc not available)"
            echo "🔄 Validating CPU-only llama build instead..."
            
            # Validate that CPU-only llama build works
            cargo build --release --no-default-features --features llama
            echo "✅ CPU-only llama build completed successfully"
            echo "📝 Note: CUDA validation skipped - this is expected on standard GitHub runners"
          fi
          echo "::endgroup::"

      - name: "🚧 GATE 3/6: Template Packaging Validation (Issue #60 Protection)"
        run: |
          echo "::group::Gate 3: Template Packaging"
          # Check for Docker templates with OS-agnostic path handling
          # Use --allow-dirty to handle uncommitted Cargo.lock changes from dependency resolution
          if cargo package --allow-dirty --list | grep -E "(^|[/\\\\])templates[/\\\\]docker[/\\\\]Dockerfile$" > /dev/null; then
            echo "✅ Docker templates properly included in package"
          else
            echo "❌ Required Docker template missing from package - Issue #60 regression!"
            echo "Package contents:"
            cargo package --allow-dirty --list | grep -i docker || echo "No docker files found"
            exit 1
          fi
          echo "::endgroup::"

      - name: "🚧 GATE 4/6: Binary Size Constitutional Limit (20MB)"
        run: |
          echo "::group::Gate 4: Binary Size"
          size=$(stat -c%s target/release/shimmy 2>/dev/null || echo "0")
          max_size=$((20 * 1024 * 1024))
          if [ "$size" -gt "$max_size" ]; then
            echo "❌ Binary size ${size} exceeds constitutional limit of ${max_size} bytes"
            exit 1
          fi
          echo "✅ Binary size ${size} bytes within constitutional limit"
          echo "::endgroup::"

      - name: "🚧 GATE 5/6: Test Suite Validation"
        run: |
          echo "::group::Gate 5: Tests"
          # Run tests that don't require model files (exclude integration tests needing .gguf files)
          cargo test --lib --no-default-features --features huggingface -- --skip test_generate_handler --skip test_chat_completions
          echo "✅ Core tests passing"
          echo "::endgroup::"

      - name: "🚧 GATE 6/6: Documentation Validation"
        run: |
          echo "::group::Gate 6: Documentation"
          
          # Check if CUDA Toolkit is available for documentation build
          if command -v nvcc >/dev/null 2>&1; then
            echo "✅ CUDA Toolkit found, building docs with all features..."
            cargo doc --no-deps --all-features
            echo "✅ Documentation with all features built successfully"
          else
            echo "⚠️ CUDA Toolkit not found on runner (nvcc not available)"
            echo "🔄 Building documentation without CUDA features..."
            
            # Build docs without CUDA features to avoid build failures
            cargo doc --no-deps --features "huggingface,llama,mlx"
            echo "✅ Documentation built successfully (CUDA features excluded)"
            echo "📝 Note: CUDA documentation skipped - this is expected on standard GitHub runners"
          fi
          echo "::endgroup::"

      - name: "🚧 GATE 7/7: Regression Test Suite"
        run: |
          echo "::group::Gate 7: Regression Tests"
          echo "🧪 Running comprehensive regression test suite..."
          echo "📋 This validates all critical functionality and prevents regressions"
          
          chmod +x scripts/run-regression-tests.sh
          if ./scripts/run-regression-tests.sh; then
            echo "✅ All regression tests passed"
            echo "🔒 No regressions detected in:"
            echo "   • Issue #13 (Qwen model templates)"
            echo "   • Issue #12 (Custom model directories)" 
            echo "   • Issue #72 (GPU backend flags)"
            echo "   • Issue #101 (Performance & streaming)"
            echo "   • OpenAI API compatibility"
            echo "   • CLI functionality"
            echo "   • Error handling"
          else
            echo "❌ Regression tests failed - blocking release"
            exit 1
          fi
          echo "::endgroup::"

      - name: "🎯 RELEASE GATES SUMMARY"
        id: gates
        run: |
          echo "🎉 ALL 7 MANDATORY GATES PASSED!"
          echo "✅ Core Build"
          echo "✅ CUDA Timeout Protection (Issue #59)"
          echo "✅ Template Packaging (Issue #60)"
          echo "✅ Binary Size Constitutional Limit"
          echo "✅ Test Suite Validation"
          echo "✅ Documentation Build"
          echo "✅ Regression Test Suite"
          echo "✅ Test Suite"
          echo "✅ Documentation"
          echo "should_publish=true" >> $GITHUB_OUTPUT

      # 🚀 REUSE GATE BINARIES - NO RECOMPILATION WASTE
      - name: "Upload gate binaries as artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: gate-built-binary
          path: target/release/shimmy

  # 🚀 LINUX BINARY - REUSE FROM GATES (NO RECOMPILATION)
  reuse-gate-binary:
    needs: preflight
    if: needs.preflight.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download gate-built binary
        uses: actions/download-artifact@v4
        with:
          name: gate-built-binary
          path: ./

      - name: Upload as Linux x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: shimmy-linux-x86_64
          path: shimmy

  # 🚀 CROSS-PLATFORM BUILDS (ONLY WHAT GATES DIDN'T BUILD)
  build:
    needs: preflight
    if: needs.preflight.outputs.should_publish == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary-name: shimmy
            artifact-name: shimmy-linux-x86_64-universal
            features: huggingface

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: shimmy.exe
            artifact-name: shimmy-windows-x86_64.exe
            features: huggingface  # CPU-only version
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: shimmy.exe
            artifact-name: shimmy-windows-x86_64-gpu.exe
            features: gpu  # GPU-enabled version with OpenCL/Vulkan support

          - os: macos-latest
            target: x86_64-apple-darwin
            binary-name: shimmy
            artifact-name: shimmy-macos-intel
            features: apple

          - os: macos-latest
            target: aarch64-apple-darwin
            binary-name: shimmy
            artifact-name: shimmy-macos-arm64
            features: apple

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (for musl builds)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        shell: bash
        run: |
          if [ -n "${{ matrix.features }}" ]; then
            echo "Building with features: ${{ matrix.features }}"
            cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}
          else
            echo "Building with default features"
            cargo build --release --target ${{ matrix.target }} --features huggingface
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary-name }}

  release:
    needs: [preflight, reuse-gate-binary, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.preflight.outputs.should_publish == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files

          # Copy and rename artifacts
          cp artifacts/shimmy-linux-x86_64/shimmy release-files/shimmy-linux-x86_64
          cp artifacts/shimmy-linux-x86_64/shimmy release-files/shimmy  # Generic name

          cp artifacts/shimmy-windows-x86_64.exe/shimmy.exe release-files/shimmy-windows-x86_64.exe
          cp artifacts/shimmy-windows-x86_64.exe/shimmy.exe release-files/shimmy.exe  # Generic name
          
          # GPU-enabled Windows binary
          cp artifacts/shimmy-windows-x86_64-gpu.exe/shimmy.exe release-files/shimmy-windows-x86_64-gpu.exe

          cp artifacts/shimmy-macos-intel/shimmy release-files/shimmy-macos-intel
          cp artifacts/shimmy-macos-arm64/shimmy release-files/shimmy-macos-arm64

          # List what we're releasing
          echo "Release files:"
          ls -la release-files/

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            release-files/* \
            --title "Shimmy ${{ github.ref_name }}" \
            --generate-notes
